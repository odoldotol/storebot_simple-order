pk 는 해당 테이블의 존재 이유에 근간을 두자, 나머지를 인덱스로 처리하자.
바텀업으로. 핵심 로직이 필요로하는 디테일한 TX 를 설계하면서 스키마와 PK 를 디자인해자.


---




기본적으로 버전 4 가 가장 무작위성이 높다

하지만 복합키든 뭐든 아무리 고민해봐도
pk 나 인덱스에서 b-tree 정렬 성능 고려하면 uuid 자체가 정렬성을 가지는게 유리할수밖에 없다...

그리고 v4 에 비한 v7 의 부작용은 딱히 없다.
다중노드가 아니면 시계 왜곡이나 충돌가능성은 배제 가능한 수준이고
record id 로써는 외부 노출도 충분히 막을수 있고 노출되어도 문제없는 안전한 설계가 충분히 가능하다고 본다.





배포환경에서 사용중인 AWS RDS Posgres 의 버전이 15
16 부터 uuid v7 를 공식 지원.
15 -> 16 버전 업 해야할까

몇몇 키는 서버에서 직접 생성하는게 좋음. 특히 주문 id 같은것.
서버에서 생성하는 경우 postgres 공식 지원 여부는 크게 중요하지 않음. 그리고 비공식적으로도 postgres 내부에서 v7 사용하게 할 수 있음.




우선 Order 의 PK 가 정말 uuid v7 로 해서 성능 이점을 누릴 수 있을지??
pk 말고 다른 인덱스에서 정렬이 필요하다면 딱히 의미가 없을것임.


v4 쓸지 v7 쓸지는 좀 더 고민을 해보자.


---


- id, pk
uuidv4 - store_id(DBMS)
uuidv7 - user_id(APP), order_id(APP)
snowflake
ulid