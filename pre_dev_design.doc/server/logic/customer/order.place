유저가 주문서 세션을 구성한 상태에서 시작함

- 주문서 세션을 확인받기

- 유저가 결제진행 (또는 주문서 수정)
  - 매장상태 오픈인지 확인
    - 오픈이면, (아니면 거부)
      - 주문서 세션을 결제중으로 업데이트 (결제중일때는 주문서 세션 수정 금지)
        - 주문서id 생성 (DB 에 order 레코드 만들자)
          - 주문서 세션에 주문id 업데이트
            - kakaopay 결제준비요청
              - kakaopay 결제준비요청에 대한 응답오면, (응답 문제시 에러)
                - 결제 세션에 tid 등 결제정보 업데이트
                  - 결제 승인 리다이렉트

- 승인요청오면, 프로미스 만들고 풀필에 응답체이닝하기
  - 프로미스를 userId-프로미스 맵에 추가하기 (userId 중복인경우 바로 프로미스 리젝트하여 승인실패응답처리)
    - 결제승인스트림에 푸시 (유저id 주문id tid pgtoken 결제금액등확인정보)

(여기서부터 서버차원의 로지컬한 승인 트랜젝션 시작)
- 결제승인 스트림 구독자가 메시지 수신시, 세션과 메시지 비교확인하고 kakaopay 결제 승인요청하기 (세션확인안되면 주문실패, 이미 승인된 경우 성공, 아닌경우 승인처리, 실패시 주문실패처리)
  - 결제 승인응답받고,
    - 주문서 DB 생성하기 (주문서 생성 실패시 주문실패처리)
      - 스트림 캐시에 주문서id 중복유무 확인후 없으면 스트림에 추가하고 주문서id-스트림key/id 캐싱하기 (중복일시 성공, 추가 실패시 주문실패처리) -> 여기까지 성공이면 커밋인거같은데?
        - UserRecentOrder 캐싱하기 (실패시 에러로깅)
        - 주문서 세션 삭제후 성공(삭제했거나 없는경우)시 메시지 성공처리하기,
          - userId로 프로미스 완료처리하기 (완료처리할 프로미스 찾을수 없을경우에도 성공)



주문실패처리 -> 이게 롤백을 의미함
- 결제 취소, 주문서 레코드 결제 취소정보 업데이트
- 주문서 세션 결제상태 업데이트
- userId 해당하는 프로미스 리젝트처리